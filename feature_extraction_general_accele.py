# Import libraries
import numpy as np
import soundfile as sf
import librosa
import json
import datetime
import os

def feature_extract(pathToJson, npy_function_list, label_family_map, quotaDicts, instSource, count_cap=float('inf'), postfix='',):
		
		"""
		
		This function automatically filters nsynth dataset based on music instruments and instrument sources with count limit, extract selected features and save all the extracted features to a folder containing a txt file noting the listing all the npy files which individually contains the meta data, features, and labels of each datum ready for machine learning tasks.
		
		pathToJson is the path to example.json file of nsynth-dataset, consisting the metadata of each music file.
		npy_function_list is a list of tuples with the first entry being a function of intended extractiong task taking audio and sample_rate as input, and the second entry being the prefix of the filename of npy files.
		label_family_map maps music instrument type to our family definition.
		quotaDicts gives the maximum count of each instrument of different source.
		instSource lets the selection process only selecting any combinations of acoustic, electronic and synthetic data. 
		count_cap is a debug feature, and it is the overall quota of how many features should be selected.
		postfix is an arbitray string that attached to every folder and file generated by this file.
		"""
    # Load dataset description
    with open(pathToJson+'examples.json') as data_file:
        data = json.load(data_file)

    datamap={} #function -> and a list
    count=0

    for func in npy_function_list:
        datamap[func]=[]
    dataorder=[]
    familylabel=[]
    # Feature computations for data
    for datum in data:
        #only limiting to librosa stuff, not perfect, but much cleaner
        #first split so that the second split is non-overlapping
        if label_family_map[data[datum]['instrument_family']] != -1 and quotaDicts[0][(data[datum]['instrument_family'],data[datum]['instrument_source']==0)]>0 and data[datum]['instrument_source'] in instSource[0]:
            quotaDicts[0][(data[datum]['instrument_family'], data[datum]['instrument_source'] == 0)] -= 1
            if len(quotaDicts)==1:
                familylabel.append(label_family_map[data[datum]['instrument_family']])
                temp_audio, sample_rate = sf.read(pathToJson+'audio/'+data[datum]['note_str']+'.wav')
                #print(np.max(np.abs(temp_audio)))
                for func in npy_function_list:
                    datamap[func].append(func[0](temp_audio/np.max(np.abs(temp_audio)), sample_rate)) # if your function take less or more parameters, you need to create a wrapper or lambda function

                dataorder.append(data[datum])
                print(count)
                count += 1
                if count >= count_cap:
                    break
        #second layer
        elif len(quotaDicts)>1 and label_family_map[data[datum]['instrument_family']] != -1 and quotaDicts[1][(data[datum]['instrument_family'],data[datum]['instrument_source']==0)]>0 and data[datum]['instrument_source'] in instSource[1]:
            quotaDicts[1][(data[datum]['instrument_family'], data[datum]['instrument_source'] == 0)] -= 1
            if len(quotaDicts) == 2:
                familylabel.append(label_family_map[data[datum]['instrument_family']])
                temp_audio, sample_rate = sf.read(pathToJson + 'audio/' + data[datum]['note_str'] + '.wav')
                # print(np.max(np.abs(temp_audio)))
                for func in npy_function_list:
                    datamap[func].append(func[0](temp_audio / np.max(np.abs(temp_audio)),
                                                 sample_rate))  # if your function take less or more parameters, you need to create a wrapper or lambda function

                dataorder.append(data[datum])
                print(count)
                count += 1
                if count >= count_cap:
                    break

    path='data'+postfix+'\\'
    os.makedirs(path)
    vectorfiles=['dataorder'+postfix+'.npy\n','familylabel'+postfix+'.npy\n']
    np.save(path+'dataorder'+postfix+'.npy',dataorder)
    np.save(path+'familylabel'+postfix+'.npy', familylabel)

    for func in npy_function_list:
        vectorfiles.append(func[1]+postfix+'.npy\n')
        np.save(path+func[1]+postfix+'.npy',datamap[func])

    with open(path+'filelist'+postfix+'.txt','w') as fp:
        fp.writelines(vectorfiles)
    print(quotaDicts[-1])

def mfccanddeltas(audio, samplerate):
    mfcc=librosa.feature.mfcc(audio,samplerate)
    result = mfcc
    deltadd=librosa.feature.delta(mfcc, order=1)
    result = np.append(result, librosa.feature.delta(mfcc, order=1))
    result = np.append(result, librosa.feature.delta(mfcc, order=2))
    return result

if __name__ == '__main__':
		"""
		Usage: switching the config variable to a configuration list: {"dict_training", "svm_trainingA", "svm_trainingE", "svm_trainingAE", "svm_testing", "base_trainingAE", "base_testing"}
		and then start the program to start the feature extraction, with the preset mentioned in the paper.
		"""
    config="base_trainingAE"
    if config=="dict_training":
        postfix=''.join(list(filter(str.isalnum, datetime.datetime.isoformat(datetime.datetime.now()))))+config
        npyfunctionlist=[]
        #npyfunctionlist.append((librosa.feature.mfcc, 'mfcc'))
        #npyfunctionlist.append((mfccanddeltas, 'mfccdlanddldl'))
        npyfunctionlist.append(((lambda audio, samplerate: librosa.feature.melspectrogram(y=audio, sr=samplerate, n_fft=2048, hop_length=512, power=2.0)),'melspectrogram'))
        npyfunctionlist.append(((
                                lambda audio, samplerate: librosa.feature.chroma_cqt(y=audio, sr=samplerate, hop_length=512)),
                                'chromacqt'))
        #npyfunctionlist.append((librosa.feature.spectral_rolloff, 'spectral_rolloff'))
        #npyfunctionlist.append((librosa.feature.spectral_centroid, 'spectral_centroid'))
        #npyfunctionlist.append((lambda audio,samplerate:librosa.feature.zero_crossing_rate(audio), 'zcr')) #example of lambda function
        labelfamilymap = {0:0,3:0,8:0,2:1,6:1,7:1,1:2,4:3,5:3,10:-1,9:-1}
        # quotaDict = {0: 84, 3: 84, 8: 84, 2: 84, 7: 84, 6: 84, 1: 252, 4: 126, 5: 126}
        quotaDicts = [{(0, True): 42, (3, True): 42, (8, True): 42, (2, True): 42, (7, True): 42, (6, True): 42, (1, True): 126, (4, True): 63, (5, True): 63,
                     (0, False): 42, (3, False): 42, (8, False): 42, (2, False): 42, (7, False): 42, (6, False): 42, (1, False): 126, (4, False):63, (5, False):63}]
        feature_extract('Nsynth_Dataset/nsynth-train/',npyfunctionlist,labelfamilymap,quotaDicts,[(0,1,2)], float('inf'), postfix)
    if config=="svm_trainingA":
        postfix=''.join(list(filter(str.isalnum, datetime.datetime.isoformat(datetime.datetime.now()))))+config
        npyfunctionlist=[]
        npyfunctionlist.append(((lambda audio, samplerate: librosa.feature.melspectrogram(y=audio, sr=samplerate, n_fft=2048, hop_length=512, power=2.0)),'melspectrogram'))
        npyfunctionlist.append(((
                                lambda audio, samplerate: librosa.feature.chroma_cqt(y=audio, sr=samplerate, hop_length=512)),
                                'chromacqt'))
        labelfamilymap = {0:0,3:0,8:0,2:1,6:1,7:1,1:2,4:3,5:3,10:-1,9:-1}

        quotaDicts = [{(0, True): 42, (3, True): 42, (8, True): 42, (2, True): 42, (7, True): 42, (6, True): 42, (1, True): 126, (4, True): 63, (5, True): 63,
                     (0, False): 42, (3, False): 42, (8, False): 42, (2, False): 42, (7, False): 42, (6, False): 42, (1, False): 126, (4, False):63, (5, False):63},
                      {(0, True): 42, (3, True): 42, (8, True): 42, (2, True): 42, (7, True): 42, (6, True): 42, (1, True): 126, (4, True): 63, (5, True): 63,
                     (0, False): 42, (3, False): 42, (8, False): 42, (2, False): 42, (7, False): 42, (6, False): 42, (1, False): 126, (4, False):63, (5, False):63}]
        feature_extract('Nsynth_Dataset/nsynth-train/',npyfunctionlist,labelfamilymap,quotaDicts,[(0,1,2), (0,)], float('inf'), postfix)
    if config=="svm_trainingE":
        postfix=''.join(list(filter(str.isalnum, datetime.datetime.isoformat(datetime.datetime.now()))))+config
        npyfunctionlist=[]
        npyfunctionlist.append(((lambda audio, samplerate: librosa.feature.melspectrogram(y=audio, sr=samplerate, n_fft=2048, hop_length=512, power=2.0)),'melspectrogram'))
        npyfunctionlist.append(((
                                lambda audio, samplerate: librosa.feature.chroma_cqt(y=audio, sr=samplerate, hop_length=512)),
                                'chromacqt'))
        labelfamilymap = {0:0,3:0,8:0,2:1,6:1,7:1,1:2,4:3,5:3,10:-1,9:-1}

        quotaDicts = [{(0, True): 42, (3, True): 42, (8, True): 42, (2, True): 42, (7, True): 42, (6, True): 42, (1, True): 126, (4, True): 63, (5, True): 63,
                     (0, False): 42, (3, False): 42, (8, False): 42, (2, False): 42, (7, False): 42, (6, False): 42, (1, False): 0, (4, False):63, (5, False):63},
                      {(0, True): 42, (3, True): 42, (8, True): 42, (2, True): 42, (7, True): 42, (6, True): 42,(1, True): 126, (4, True): 63, (5, True): 63,
                       (0, False): 42, (3, False): 42, (8, False): 42, (2, False): 42, (7, False): 42, (6, False): 42, (1, False): 126, (4, False): 63, (5, False): 63}]
        feature_extract('Nsynth_Dataset/nsynth-train/',npyfunctionlist,labelfamilymap,quotaDicts,[(0,1,2), (1,2)], float('inf'), postfix)
    if config == "svm_trainingAE":
        postfix = ''.join(list(filter(str.isalnum, datetime.datetime.isoformat(datetime.datetime.now())))) + config
        npyfunctionlist = []
        npyfunctionlist.append(((lambda audio, samplerate: librosa.feature.melspectrogram(y=audio, sr=samplerate,
                                                                                          n_fft=2048, hop_length=512,
                                                                                          power=2.0)),
                                'melspectrogram'))
        npyfunctionlist.append(((
                                    lambda audio, samplerate: librosa.feature.chroma_cqt(y=audio, sr=samplerate,
                                                                                         hop_length=512)),
                                'chromacqt'))
        labelfamilymap = {0: 0, 3: 0, 8: 0, 2: 1, 6: 1, 7: 1, 1: 2, 4: 3, 5: 3, 10: -1, 9: -1}
        quotaDicts = [{(0, True): 42, (3, True): 42, (8, True): 42, (2, True): 42, (7, True): 42, (6, True): 42, (1, True): 126, (4, True): 63, (5, True): 63,
             (0, False): 42, (3, False): 42, (8, False): 42, (2, False): 42, (7, False): 42, (6, False): 42,(1, False): 0, (4, False): 63, (5, False): 63},
            {(0, True): 21, (3, True): 21, (8, True): 21, (2, True): 21, (7, True): 21, (6, True): 21, (1, True): 63,(4, True): 32, (5, True): 31,
             (0, False): 21, (3, False): 21, (8, False): 21, (2, False): 21, (7, False): 21, (6, False): 21,(1, False): 63, (4, False): 32, (5, False): 31}]
        feature_extract('Nsynth_Dataset/nsynth-train/', npyfunctionlist, labelfamilymap, quotaDicts,
                        [(0, 1, 2), (0, 1, 2)], float('inf'), postfix)
    if config == "svm_testing":
        postfix = ''.join(list(filter(str.isalnum, datetime.datetime.isoformat(datetime.datetime.now())))) + config
        npyfunctionlist = []
        npyfunctionlist.append(((lambda audio, samplerate: librosa.feature.melspectrogram(y=audio, sr=samplerate,
                                                                                          n_fft=2048, hop_length=512,
                                                                                          power=2.0)),
                                'melspectrogram'))
        npyfunctionlist.append(((
                                    lambda audio, samplerate: librosa.feature.chroma_cqt(y=audio, sr=samplerate,
                                                                                         hop_length=512)),
                                'chromacqt'))
        labelfamilymap = {0: 0, 3: 0, 8: 0, 2: 1, 6: 1, 7: 1, 1: 2, 4: 3, 5: 3, 10: -1, 9: -1}

        quotaDicts = [{(0, True): 84, (3, True): 126, (8, True): 126, (2, True): 126, (7, True): 126, (6, True): 84, (1, True): 252, (4, True): 126, (5, True): 126,
                     (0, False): 42, (3, False): 42, (8, False): 42, (2, False): 42, (7, False): 42, (6, False): 42, (1, False): 126, (4, False):63, (5, False):63}]
        feature_extract('Nsynth_Dataset/nsynth-valid/', npyfunctionlist, labelfamilymap, quotaDicts,
                        [(0, )], float('inf'), postfix)

    if config == "base_trainingAE":
        postfix = ''.join(list(filter(str.isalnum, datetime.datetime.isoformat(datetime.datetime.now())))) + config
        npyfunctionlist = []
        npyfunctionlist.append((mfccanddeltas, 'mfccdlanddldl'))
        labelfamilymap = {0: 0, 3: 0, 8: 0, 2: 1, 6: 1, 7: 1, 1: 2, 4: 3, 5: 3, 10: -1, 9: -1}

        quotaDicts = [{(0, True): 42, (3, True): 42, (8, True): 42, (2, True): 42, (7, True): 42, (6, True): 42, (1, True): 126, (4, True): 63, (5, True): 63,
             (0, False): 42, (3, False): 42, (8, False): 42, (2, False): 42, (7, False): 42, (6, False): 42,(1, False): 0, (4, False): 63, (5, False): 63},
            {(0, True): 21, (3, True): 21, (8, True): 21, (2, True): 21, (7, True): 21, (6, True): 21, (1, True): 63,(4, True): 32, (5, True): 31,
             (0, False): 21, (3, False): 21, (8, False): 21, (2, False): 21, (7, False): 21, (6, False): 21,(1, False): 63, (4, False): 32, (5, False): 31}]
        feature_extract('Nsynth_Dataset/nsynth-train/', npyfunctionlist, labelfamilymap, quotaDicts,
                        [(0, 1, 2), (0, 1, 2)], float('inf'), postfix)

    if config == "base_testing":
        postfix = ''.join(list(filter(str.isalnum, datetime.datetime.isoformat(datetime.datetime.now())))) + config
        npyfunctionlist = []
        npyfunctionlist.append((mfccanddeltas, 'mfccdlanddldl'))
        labelfamilymap = {0: 0, 3: 0, 8: 0, 2: 1, 6: 1, 7: 1, 1: 2, 4: 3, 5: 3, 10: -1, 9: -1}

        quotaDicts = [{(0, True): 84, (3, True): 126, (8, True): 126, (2, True): 126, (7, True): 126, (6, True): 84, (1, True): 252, (4, True): 126, (5, True): 126,
                     (0, False): 42, (3, False): 42, (8, False): 42, (2, False): 42, (7, False): 42, (6, False): 42, (1, False): 126, (4, False):63, (5, False):63}]
        feature_extract('Nsynth_Dataset/nsynth-valid/', npyfunctionlist, labelfamilymap, quotaDicts,
                        [(0,)], float('inf'), postfix)